@using SalesOrders.Contracts;
@using SalesOrders.Contracts.Response;
<div class="row">
    <h5>SubElements:</h5>
    @if (SubElementItems == null || SubElementItems.Count == 0)
    {
        <p> No sub elements available.</p>
    }
    else
    {
        <table class="table">
            <thead>
                <tr>
                    <th>Element</th>
                    <th>Type</th>
                    <th>Width</th>
                    <th>Height</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var subElementItem in SubElementItems)
                {
                    <tr>
                        <td>@subElementItem.Element</td>
                        <td>@subElementItem.Type</td>
                        <td>@subElementItem.Width</td>
                        <td>@subElementItem.Height</td>
                        <td>
                            <button class="btn btn-secondary" 
                                @onclick="@(() => DeleteSubElementAsync(subElementItem))">Delete</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
</div>


@code
{
    [Parameter]
    public List<SubElementItem>? SubElementItems { get; set; }

    [Parameter]
    public EventCallback<SubElementItem> OnDeleteCallback { get; set; }

    public async void DeleteSubElementAsync(SubElementItem item)
    {
        await OnDeleteCallback.InvokeAsync(item);
    }
}
