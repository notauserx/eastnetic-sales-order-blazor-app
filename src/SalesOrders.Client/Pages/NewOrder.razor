@page "/new-order"
@using SalesOrders.Contracts.Response;
@using SalesOrders.Core.Enums;
@using Microsoft.Extensions.Logging
@inject ILogger<NewOrder> Logger
@inject HttpClient Http
@inject NavigationManager NavigationManager

<div class="mb-3">
    <button class="btn btn-secondary" @onclick="HandleCancel">Back to orders</button>
</div>

<div class="form-control">
    <fieldset>
        <legend class="w-auto">New Order details</legend>
        <EditForm EditContext="@editContext" OnSubmit="@HandleSubmit">
            <DataAnnotationsValidator />

            <div class="mb-3">
                <label class="form-label">Name</label>
                <div class="col-md-4">
                    <InputText class="form-control" @bind-Value="newOrderItem.Name" />
                </div>
                <ValidationMessage For="@(() => newOrderItem.Name)" />
            </div>

            <div class="mb-3">
                <label class="form-label">State: </label>
                <div class="col-md-4">
                    <InputSelect @bind-Value="@newOrderItem.State">
                        <option value="">--Select State--</option>

                        @foreach (var state in Enum.GetValues(typeof(USState)))
                        {
                            <option value="@state">@state</option>
                        }
                    </InputSelect>
                </div>
                <ValidationMessage For="@(() => newOrderItem.State)" />
            </div>

            <div class="form-group mb-3">
                <button type="submit" class="btn btn-primary">Save</button>
                <button class="btn btn-light" @onclick="HandleCancel">Cancel</button>
            </div>

        </EditForm>

        <div class="row">
            <div class="mb-3">
                <button class="btn btn-primary" @onclick="AddNewWindow">Add Window</button>

                @if (showNewWindowForm)
                {
                    <div class="form-control">

                        <NewWindow OrderId="orderId"
                               NewWindowItem="newWindowItem"
                               SaveItem="SaveNewWindow"
                               DiscardItem="CancelAddNewWindow" />
                    </div>
                }

                <div class="row mb-3">
                    <Windows OrderId="newOrderItem.Id"
                             WindowItems="newOrderItem.Windows"
                             OnDeleteCallback="OnDeleteWindow"
                             OnDeleteSubElementCallback="OnDeleteSubElement" />
                </div>
            </div>
        </div>

    </fieldset>

</div>

@code {
    private Guid orderId = Guid.NewGuid();
    private bool showNewWindowForm = false;
    private WindowItem? newWindowItem;
    private EditContext? editContext;
    private OrderItem? newOrderItem;

    protected override void OnInitialized()
    {
        newOrderItem = new()
        {
            Id = orderId,
            Windows = new List<WindowItem>(),
        };
        InitializeNewWindowItem();

        editContext = new EditContext(newOrderItem);
    }

    private void InitializeNewWindowItem()
    {
        newWindowItem = WindowItem.CreateForOrder(orderId);
    }

    private void AddNewWindow()
    {
        showNewWindowForm = true;
    }

    public void SaveNewWindow()
    {
        newOrderItem?.Windows?.Add(new WindowItem(newWindowItem));
        InitializeNewWindowItem();
        showNewWindowForm = false;
    }

    public void CancelAddNewWindow()
    {
        showNewWindowForm = false;
    }

    private async Task HandleSubmit()
    {
        if (editContext != null && editContext.Validate())
        {
            Logger.LogInformation("HandleSubmit called: Form is valid");
            await Http.PostAsJsonAsync(Endpoints.NewOrderUri, newOrderItem);
            NavigationManager.NavigateTo("get-orders");
        }
        else
        {
            Logger.LogInformation("HandleSubmit called: Form is INVALID");
        }
    }

    public void HandleCancel()
    {
        NavigationHelper.NavigateToGetOrders(NavigationManager);
    }

    private async Task OnDeleteWindow(WindowItem item)
    {
        newOrderItem?.Windows?.Remove(item);
    }

    private async Task OnDeleteSubElement(SubElementItem item)
    {
        var window = newOrderItem?.Windows?.FirstOrDefault(i => i.Id == item.Id);
        window?.SubElements?.Remove(item);
    }
}