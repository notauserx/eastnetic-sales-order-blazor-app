@page "/new-order"
@using SalesOrders.Contracts.Response;
@using SalesOrders.Core.Enums;
@using Microsoft.Extensions.Logging
@inject ILogger<NewOrder> Logger
@inject HttpClient Http
@inject NavigationManager NavigationManager

<EditForm EditContext="@editContext" OnSubmit="@HandleSubmit">
    <DataAnnotationsValidator />

    <div class="mb-3">
        <label class="form-label">Name</label>
        <div class="col-md-4">
            <InputText class="form-control" @bind-Value="newOrderItem.Name" />
        </div>
        <ValidationMessage For="@(() => newOrderItem.Name)" />
    </div>

    <div class="mb-3">
        <label class="form-label">State: </label>
        <div class="col-md-4">
            <InputSelect @bind-Value="@newOrderItem.State">

                @foreach (var state in Enum.GetValues(typeof(USState)))
                {
                    <option value="@state">@state</option>
                }
            </InputSelect>
        </div>
        <ValidationMessage For="@(() => newOrderItem.State)" />
    </div>

    <div class="form-group">
        <button type="submit" class="btn btn-primary">Save</button>
        <button class="btn btn-light" @onclick="HandleCancel">Cancel</button>
    </div>

</EditForm>
<br/>
<div class="mb-3">
    <button class="btn btn-primary" @onclick="AddNewWindow">Add Window</button>

    @if (showNewWindowForm)
    {
        <NewWindow 
            OrderId="orderId"
            NewWindowItem="newWindowItem"
            SaveItem="SaveNewWindow"
            DiscardItem="CancelAddNewWindow"/>
    }

    <label class="form-label">Windows: </label>
    <div class="col-md-4">
        <Windows
            WindowItems="newOrderItem.Windows" 
            OnDeleteCallback="OnDeleteWindow"/>
    </div>
</div>

@code {
    private Guid orderId = Guid.NewGuid();
    private bool showNewWindowForm = false;
    private WindowItem? newWindowItem;
    private EditContext? editContext;
    private OrderItem? newOrderItem;

    protected override void OnInitialized()
    {
        newOrderItem = new()
        {
            Id = orderId,
            Windows = new List<WindowItem>(),
        };
        InitializeNewWindowItem();

        editContext = new EditContext(newOrderItem);
    }

    private void InitializeNewWindowItem()
    {
        newWindowItem = WindowItem.CreateForOrder(orderId);
    }

    private void AddNewWindow()
    {
        showNewWindowForm = true;
    }

    public void SaveNewWindow()
    {
        newOrderItem?.Windows?.Add(new WindowItem(newWindowItem));
        InitializeNewWindowItem();
    }

    public void CancelAddNewWindow()
    {
        showNewWindowForm = true;
    }

    private async Task HandleSubmit()
    {
        if (editContext != null && editContext.Validate())
        {
            Logger.LogInformation("HandleSubmit called: Form is valid");
            await Http.PostAsJsonAsync(Endpoints.NewOrder, newOrderItem);
        }
        else
        {
            Logger.LogInformation("HandleSubmit called: Form is INVALID");
        }
    }

    public void HandleCancel()
    {
        NavigationManager.NavigateTo("/get-orders");
    }

    private async Task OnDeleteWindow(WindowItem item)
    {
        newOrderItem?.Windows?.Remove(item);
    }
}