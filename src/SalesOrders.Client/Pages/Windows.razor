@using SalesOrders.Contracts;
@using SalesOrders.Contracts.Response;
@inject HttpClient Http
@inject NavigationManager NavigationManager

<h4>Windows:</h4>
@if(WindowItems == null || WindowItems.Count == 0)
{
    <p> No windows available.</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Quantity</th>
                <th># of Sub elements</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var windowItem in WindowItems)
            {
                <tr @key="@windowItem">
                    <td>@windowItem.Name</td>
                    <td>@windowItem.QuantityOfWindows</td>
                    <td>@windowItem.NumberOfSubElements</td>
                    <td>
                        <button class="btn btn-primary" @onclick="@(() => ToggleAddSubElement(windowItem.Id))">Create SubElement</button>
                        <button class="btn btn-secondary" @onclick="@(() => DeleteWindowAsync(windowItem))">Delete</button>
                    </td>
                </tr>
                @if (NewSubElementWindowId == windowItem.Id)
                {
                    <tr>
                        <td colspan="4">
                            <NewSubElement
                                OrderId="windowItem.OrderId"
                                WindowId="windowItem.Id"
                                OnSaveItem="OnSaveNewSubElement"
                                OnDiscardItem="OnDiscardNewSubElement" />
                        </td>
                    </tr>
                }
                @if(windowItem.SubElements != null && windowItem.SubElements.Any())
                {
                    <tr>
                        <td colspan="4">
                            <SubElements
                                SubElementItems="windowItem.SubElements"
                                OnDeleteCallback="OnDeleteSubElementCallback"
                            />
                                
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>
}

@code {
    [Parameter]
    public Guid OrderId { get; set; }

    [Parameter]
    public List<WindowItem>? WindowItems { get; set; }

    [Parameter]
    public EventCallback<WindowItem> OnDeleteCallback { get; set; }

    [Parameter]
    public EventCallback<SubElementItem> OnDeleteSubElementCallback { get; set; }

    [Parameter]
    public EventCallback<SubElementItem> OnSaveSubElementCallback { get; set; }

    private Guid NewSubElementWindowId;

    public async Task DeleteWindowAsync(WindowItem item)
    {
        await OnDeleteCallback.InvokeAsync(item);
    }

    public void ToggleAddSubElement(Guid windowId)
    {
        NewSubElementWindowId = windowId;
    }

    private async Task OnSaveNewSubElement(SubElementItem item)
    {
        await OnSaveSubElementCallback.InvokeAsync(item);
        NewSubElementWindowId = Guid.Empty;
    }

    private void OnDiscardNewSubElement()
    {
        NewSubElementWindowId = Guid.Empty;
    }

}
