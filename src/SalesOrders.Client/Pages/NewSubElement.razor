@page "/new-sub-element"
@using SalesOrders.Contracts.Response;
@using SalesOrders.Core.Enums;
@using Microsoft.Extensions.Logging
@inject ILogger<NewSubElement> Logger
@inject HttpClient Http
@inject NavigationManager NavigationManager

<div class="row">
    <EditForm EditContext="@editContext">
        <DataAnnotationsValidator />

        <div class="mb-3">
            <label class="form-label">Element</label>
            <div class="col-md-6">
                <InputNumber class="form-control" @bind-Value="newSubElementItem.Element" />
            </div>
            <ValidationMessage For="@(() => newSubElementItem.Element)" />
        </div>

        <div class="mb-3">
            <label class="form-label">Type: </label>
            <div class="col-md-6">
                <InputSelect @bind-Value="@newSubElementItem.Type">
                    <option value="">None</option>

                    @foreach (var state in Enum.GetValues(typeof(SubElementType)))
                    {
                        <option value="@state">@state</option>
                    }
                </InputSelect>
            </div>
            <ValidationMessage For="@(() => newSubElementItem.Type)" />
        </div>

        <div class="mb-3">
            <label class="form-label">Width</label>
            <div class="col-md-6">
                <InputNumber class="form-control" @bind-Value="newSubElementItem.Width" />
            </div>
            <ValidationMessage For="@(() => newSubElementItem.Width)" />
        </div>

        <div class="mb-3">
            <label class="form-label">Height</label>
            <div class="col-md-6">
                <InputNumber class="form-control" @bind-Value="newSubElementItem.Height" />
            </div>
            <ValidationMessage For="@(() => newSubElementItem.Height)" />
        </div>


        <div class="form-group">
            <button type="submit" class="btn btn-primary" @onclick="HandleSaveSubElement">Add Sub Element</button>
            <button class="btn btn-light" @onclick="HandleCancelSubElement">Cancel</button>
        </div>

    </EditForm>
</div>
@code {
    [Parameter]
    public Guid OrderId { get; set; }
    [Parameter]
    public Guid WindowId { get; set; }

    [Parameter]
    public EventCallback<SubElementItem> OnSaveItem { get; set; }
    [Parameter]
    public EventCallback OnDiscardItem { get; set; }

    private SubElementItem newSubElementItem;

    private EditContext editContext;

    protected override void OnInitialized()
    {
        InitializeNewSubElement();
        editContext = new EditContext(newSubElementItem);
    }

    private void InitializeNewSubElement()
    {
        newSubElementItem = SubElementItem.CreateForWindow(WindowId);
    }

    private async Task HandleSaveSubElement()
    {
        if (editContext != null && editContext.Validate())
        {
            Logger.LogInformation("HandleSubmit called: Form is valid");
            await OnSaveItem.InvokeAsync(newSubElementItem);
            InitializeNewSubElement();
        }
        else
        {
            Logger.LogInformation("HandleSubmit called: Form is INVALID");
        }
    }

    public async Task HandleCancelSubElement()
    {
        await OnDiscardItem.InvokeAsync();
    }
}