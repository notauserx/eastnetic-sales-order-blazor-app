@page "/new-window"
@using SalesOrders.Contracts.Response;
@using SalesOrders.Core.Enums;
@using Microsoft.Extensions.Logging
@inject ILogger<NewWindow> Logger
@inject HttpClient Http

<h4>Add New Window Details:</h4>
<div class="container-fluid">
    <div class="row mb-3">
        <div class="col-md-6">
            <EditForm EditContext="@editContext">
                <DataAnnotationsValidator />

                <div class="mb-3">
                    <label class="form-label">Name</label>
                    <div class="col-md-6">
                        <InputText class="form-control" @bind-Value="NewWindowItem.Name" />
                    </div>
                    <ValidationMessage For="@(() => NewWindowItem.Name)" />
                </div>

                <div class="mb-3">
                    <label class="form-label"># of Windows</label>
                    <div class="col-md-6">
                        <InputNumber class="form-control" @bind-Value="NewWindowItem.QuantityOfWindows" />
                    </div>
                    <ValidationMessage For="@(() => NewWindowItem.QuantityOfWindows)" />
                </div>

                <div class="form-group">
                    <button type="submit" class="btn btn-primary" @onclick="HandleSave">Add Window</button>
                    <button class="btn btn-light" @onclick="HandleCancel">Cancel</button>
                </div>

            </EditForm>
        </div>
        <div class="col-md-6">

            <div class="row mb-3">
                <button class="btn btn-primary" @onclick="AddNewSubElement">Add SubElement</button>
            </div>
            <div class="row">
                <div class="mb-3">

                    @if (showNewSubElementForm)
                    {
                        <NewSubElement OrderId="NewWindowItem.OrderId"
                                   WindowId="NewWindowItem.Id"
                                   OnSaveItem="HandleNewSubElementSave"
                                   OnDiscardItem="HandleNewSubElementDiscard" />
                    }
                    <SubElements
                        SubElementItems="NewWindowItem.SubElements"
                        OnDeleteCallback="HandleSubElementDelete"/>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public Guid OrderId { get; set; }
    [Parameter]
    public WindowItem NewWindowItem { get; set; }
    [Parameter]
    public EventCallback<WindowItem> SaveItem { get; set; }
    [Parameter]
    public EventCallback DiscardItem { get; set; }

    private EditContext editContext;
    private SubElementItem newSubElementItem;
    private bool showNewSubElementForm;

    protected override void OnInitialized()
    {
        editContext = new EditContext(NewWindowItem);
    }

    private void InitializeNewSubElementItem()
    {
        newSubElementItem = SubElementItem.CreateForWindow(NewWindowItem.Id);
    }

    private void AddNewSubElement()
    {
        showNewSubElementForm = true;
    }

    private async Task HandleSave()
    {
        if (editContext != null && editContext.Validate())
        {
            Logger.LogInformation("HandleSubmit called: Form is valid");
            await SaveItem.InvokeAsync(NewWindowItem);
        }
        else
        {
            Logger.LogInformation("HandleSubmit called: Form is INVALID");
        }
    }

    public async Task HandleCancel()
    {
        await DiscardItem.InvokeAsync();
    }

    public void HandleNewSubElementSave(SubElementItem item)
    {
        NewWindowItem?.SubElements?.Add(new SubElementItem(item));
        showNewSubElementForm = false;
    }

    public void HandleNewSubElementDiscard()
    {
        showNewSubElementForm = false;
    }

    public void HandleSubElementDelete(SubElementItem item)
    {
        NewWindowItem?.SubElements?.Remove(item);
    }

}