@using SalesOrders.Contracts;
@using SalesOrders.Contracts.Response;

@inject HttpClient Http
@inject NavigationManager NavigationManager

@if(OrderItems == null)
{
    <p>No orders found.</p>
}
else
{
<table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>State</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var orderItem in OrderItems)
            {
                <tr>
                    <td>@orderItem.Name</td>
                    <td>@orderItem.State</td>
                    <td>
                        <button>Add Window</button>
                        <button @onclick="@(() => DeleteOrder(orderItem.Id))">Delete</button>
                    </td>
                </tr>
                @if (orderItem.Windows != null && orderItem.Windows.Any())
                {
                    <tr>
                        <td colspan="3">
                            <Windows
                                WindowItems="orderItem.Windows"
                                OnDeleteCallback="DeleteWindow"/>
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>
}

@code {
    [Parameter]
    public List<OrderItem>? OrderItems { get; set; }

    [Parameter]
    public EventCallback<OrderItem> OnDeleteOrder { get; set; }

    private async Task DeleteOrder(Guid orderId)
    {
        await Http.DeleteAsync(Endpoints.DeleteOrderUri(orderId));
        NavigationManager.NavigateTo("/get-orders");
    }

    private async Task DeleteWindow(WindowItem item)
    {
        await Http.DeleteAsync(Endpoints.DeleteWindowUri(item.OrderId, item.Id));
        NavigationManager.NavigateTo("/get-orders");
    }
}
