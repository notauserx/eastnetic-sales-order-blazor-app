@using SalesOrders.Contracts;
@using SalesOrders.Contracts.Response;

@inject HttpClient Http
@inject NavigationManager NavigationManager

@if (OrderItems == null || OrderItems.Count == 0)
{
    <p>No orders found.</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>State</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var orderItem in OrderItems)
            {
                <tr @key="@orderItem">
                    <td>@orderItem.Name</td>
                    <td>@orderItem.State</td>
                    <td>
                        <button @onclick="@(() => ToggleAddWindowContent(orderItem.Id))" class="btn btn-primary">Add Window</button>
                        <button @onclick="@(() => DeleteOrder(orderItem.Id))" class="btn btn-secondary">Delete</button>
                    </td>
                </tr>
                @if (showAddWindowContentOrderId == orderItem.Id)
                {
                    <tr>
                        <td colspan="3">
                            <NewWindow OrderId="orderItem.Id"
                               NewWindowItem="WindowItem.CreateForOrder(orderItem.Id)"
                               SaveItem="OnSaveNewWindowToOrder"
                               DiscardItem="OnDiscardAddWindow" />
                        </td>


                    </tr>
                }
                @if (orderItem.Windows != null && orderItem.Windows.Any())
                {
                    <tr>
                        <td colspan="3">
                            <Windows 
                                OrderId="orderItem.Id"
                                WindowItems="orderItem.Windows"
                                OnDeleteCallback="DeleteWindow"
                                OnSaveSubElementCallback="SaveSubElement"
                                OnDeleteSubElementCallback="DeleteSubElement"/>
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>
}

@code {
    private List<OrderItem>? OrderItems { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await GetOrdersAsync();
    }

    private async Task GetOrdersAsync()
    {
        OrderItems = await Http.GetFromJsonAsync<List<OrderItem>>(Endpoints.GetOrdersUri);
    }

    private Guid showAddWindowContentOrderId;

    private void ToggleAddWindowContent(Guid orderId)
    {
        showAddWindowContentOrderId = orderId;
    }

    private async Task DeleteOrder(Guid orderId)
    {
        var response = await Http.DeleteAsync(Endpoints.DeleteOrderUri(orderId));
        if (response.StatusCode == System.Net.HttpStatusCode.NoContent)
            await GetOrdersAsync();
    }

    private async Task DeleteWindow(WindowItem item)
    {
        var response = await Http.DeleteAsync(Endpoints.DeleteWindowUri(item.OrderId, item.Id));
        if (response.StatusCode == System.Net.HttpStatusCode.NoContent)
            await GetOrdersAsync();
    }

    private async Task SaveSubElement(SubElementItem item)
    {
        await Http.PostAsJsonAsync(Endpoints.NewSubElementUri(item.WindowId), item);
        await GetOrdersAsync();
    }
    private async Task DeleteSubElement(SubElementItem item)
    {
        var response = await Http.DeleteAsync(Endpoints.DeleteSubElementUri(item.WindowId, item.Id));
        if(response.StatusCode == System.Net.HttpStatusCode.NoContent)
            await GetOrdersAsync();
    }

    private async Task OnSaveNewWindowToOrder(WindowItem windowItem)
    {
        await Http.PostAsJsonAsync(Endpoints.NewWindowUri(windowItem.OrderId), windowItem);
        showAddWindowContentOrderId = Guid.Empty;
        await GetOrdersAsync();
    }

    private void OnDiscardAddWindow()
    {
        showAddWindowContentOrderId = Guid.Empty;
    }
}
